package comp2402TreeEditor;


public class AVLTreeNode extends BSTreeNode{
 
 // CONSTRUCTORS ========================================================
  public AVLTreeNode() {
  }


 public AVLTreeNode(Point aPoint) {
  super(aPoint);
 }
 
 public AVLTreeNode(DataADT data) {
  super(data);
 }
 
 public void insertNode(TreeNode aNode){
  //This insert method of a Binary Search Tree inserts aNode
  //in search tree order.
  //O(tree height)
  
  if(!(aNode instanceof AVLTreeNode)) return;
  
  if(aNode.getData().compare(getData()) < 0){
     //aNode should go in left subtree
       if(leftChild == null) {
        //left child is free
        leftChild = (BSTreeNode) aNode;
        aNode.setParent(this);
        aNode.setLocation(this.getLocation()); //starting location for animation
       }
       else{
        leftChild.insertNode(aNode);
       }
  }
  else{
     //aNode should go in right subtree
        if(rightChild == null) {
           //right child is free
           rightChild = (BSTreeNode) aNode;
           aNode.setParent(this);
           aNode.setLocation(this.getLocation()); //starting location for animation
        }
        else {
          rightChild.insertNode(aNode);
        }
     
  }
 }

}
 
